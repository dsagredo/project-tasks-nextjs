generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model employee {
    id        Int      @id @default(autoincrement())
    name      String   @db.VarChar
    lastname  String   @db.VarChar
    isAdmin   Boolean  @default(false)
    createdAt DateTime @default(now()) @db.Timestamp(6)
    roles     String[] @default([])
}

model tasks {
    id          String   @id @default(uuid())
    description String
    complete    Boolean  @default(false)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user   user   @relation(fields: [userId], references: [id])
    userId String
}

model account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?

    user user @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
    id            String    @id @default(uuid())
    name          String?
    password      String?
    roles         String[]  @default(["member"])
    isActive      Boolean   @default(true)
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      account[]
    sessions      session[]
    tasks         tasks[]
}

model verificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
